<?php

require_once'config.php';
require_once 'functions.php';
require_once 'app.class.php';
require_once 'controller.class.php';

defined('APPLICATION_TITLE') or define('APPLICATION_TITLE', 'Pew-Pew-Pew Testing');

class ConcreteController extends Controller {
    public $libs = array('Markdown');
    function index() {}
    function before_action() {}
    function after_action() {}
    function before_render() {}
}

class ConcreteController2 extends Controller {
    public $libs = 'Markdown';
    public $use_db = false;
    function index() {}
}

class ConcreteController3 extends Controller {
    public $libs = 'asdasd';
    function index() {}
}

function get_segments($string) {
    $app = new App();
    return $app->get_segments($string);
}

/**
 * Test class for Controller.
 * Generated by PHPUnit on 2012-01-14 at 13:58:05.
 */
class ControllerTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Controller
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ConcreteController(get_segments('concrete_controller/index/1/2/3'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    public function test_construct()
    {
        $controller = new ConcreteController(get_segments('my_controller/_an_action/1/2/3'));
        $this->assertTrue(is_object($controller));
        $this->assertEquals('ConcreteController', get_class($controller));
        
        $controller2 = new ConcreteController2(get_segments('my_controller/'));
        $this->assertTrue(is_object($controller2));
        $this->assertEquals('ConcreteController2', get_class($controller2));
        
        $controller3 = new ConcreteController3(get_segments('my_controller/_an_action/this:that'));
        $this->assertTrue(is_object($controller3));
        $this->assertEquals('ConcreteController3', get_class($controller3));
        
        $form_segments = get_segments('my_controller/_an_action');
        $form_segments['form'] = array('id' => '0', 'name' => 'user');
        $controller4 = new ConcreteController($form_segments);
        $this->assertTrue(is_object($controller4));
        $this->assertEquals('ConcreteController', get_class($controller4));
    }

    public function test_action()
    {
        ob_start();
        $controller = new ConcreteController(get_segments('my_controller/index/1/2/3'));
        $controller->_action();
        
        $result = ob_get_contents();
        ob_end_clean();
        
        ob_start();
        $controller = new ConcreteController(get_segments('my_controller/@index/1/2/3'));
        $controller->_action();
        
        $result = ob_get_contents();
        ob_end_clean();
        
        ob_start();
        $controller = new ConcreteController(get_segments('my_controller/:index/1/2/3'));
        $controller->_action();
        
        $result = ob_get_contents();
        ob_end_clean();
    }

    public function test__get()
    {
        $model = $this->object->model;
        $this->assertEquals('Model', get_class($model));
        
        $this->assertNull($this->object->non_existant);
        
        $cnt = new ConcreteController2();
        $this->assertNull($cnt->model);
    }

    public function test__set()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
    
    public function test_view()
    {
        ob_start();
        $controller = new ConcreteController(get_segments('concrete_controller/index/1/2/3'));
        $controller->_action();
        $controller->_view();
        
        $result = ob_get_contents();
        ob_end_clean();
        
        ob_start();
        $controller = new ConcreteController(get_segments('concrete_controller/@index/1/2/3'));
        $controller->_action();
        $controller->_view();
        
        $result = ob_get_contents();
        ob_end_clean();
        
        ob_start();
        $controller = new ConcreteController(get_segments('concrete_controller/:index/1/2/3'));
        $controller->_action();
        $controller->_view();
        
        $result = ob_get_contents();
        ob_end_clean();
    }

    public function test_get_view_file()
    {
        $this->assertTrue(is_string($this->object->_get_view_file()));
    }

    public function test_render_twig()
    {
        if (class_exists('Twig_Autoloader')) {
            ob_start();
            $controller = new ConcreteController(get_segments('concrete_controller/:index/1/2/3'));
            $controller->use_twig = true;
            $controller->_action();
            $controller->_view();
        
            $result = ob_get_contents();
            ob_end_clean();
            
            $this->assertTrue(is_string($result));
        } else {
            $this->markTestSkipped();
        }
    }
    
    public function test_render_html()
    {
        ob_start();
        $controller = new ConcreteController(get_segments('concrete_controller/:index/1/2/3'));
        $controller->use_twig = false;
        $controller->_action();
        $controller->_view();

        $result = ob_get_contents();
        ob_end_clean();

        $this->assertTrue(is_string($result));
    }

    public function test_render_json()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function test_render_xml()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function test_render_layout()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testElement()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
}

?>
