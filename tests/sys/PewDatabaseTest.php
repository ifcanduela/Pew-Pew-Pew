<?php

require_once 'pew_database.class.php';

define('MYSQL_HOST', 'localhost');
define('MYSQL_USER', '****');
define('MYSQL_PASS', '********');
define('MYSQL_NAME', 'pew_tests');

/**
 * Test class for PewDatabase.
 * Generated by PHPUnit on 2012-01-11 at 12:35:25.
 */
class PewDatabaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var PewDatabase
     */
    protected static $pdb;
    
    /**
     * @var string 
     */
    protected static $test_db_file = 'test.sqlite';
            
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public static function setUpBeforeClass()
    {
        @unlink(self::$test_db_file);
        
        if (!file_exists(self::$test_db_file) || filesize(self::$test_db_file)) {
            $pdo = new PDO("sqlite:" . self::$test_db_file);
            $pdo->exec("CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, email TEXT)");
            $pdo->exec("CREATE TABLE test  (id INTEGER PRIMARY KEY, username TEXT, password TEXT)");
            unset($pdo);
        }

        self::$pdb = new PewDatabase(array
        (
            'engine' => 'sqlite',
            'file' => self::$test_db_file
        ));
    
        self::$pdb->values(array('username' => 'test_subj'))->insert('users');
        self::$pdb->values(array('username' => 'test_subj'))->insert('users');
        self::$pdb->values(array('username' => 'test_subj_1'))->insert('users');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public static function tearDownAfterClass()
    {
        self::$pdb->delete('users');
        @unlink(self::$test_db_file);
    }
    
    /**
     * @covers PewDatabase::__construct 
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage Database engine was not selected
     */
    public function testConstructException()
    {
        $db = new PewDatabase();
    }
    
    /**
     * @covers PewDatabase::__construct 
     * @covers PewDatabase::connect
     */
    public function testConstructUsingArraySqlite()
    {
        $db = new PewDatabase(array('engine' => 'sqlite', 'file' => ':memory:'));
        
        $this->assertEquals('PewDatabase', get_class($db));
        $this->assertNotNull($db->pdo);
    }
    
    /**
     * @covers PewDatabase::__construct 
     * @covers PewDatabase::connect
     */
    public function testConstructUsingArrayMySql()
    {
        $this->markTestIncomplete("MySQL connection not available");
        
        $db = new PewDatabase(array(
                'engine' => 'mysql', 
                'host' => MYSQL_HOST, 
                'user' => MYSQL_USER, 
                'pass' => MYSQL_PASS, 
                'name' => MYSQL_NAME
            )
        );
        
        $this->assertEquals('PewDatabase', get_class($db));
        $this->assertNotNull($db->pdo);
    }

    /**
     * @covers PewDatabase::__construct
     * @covers PewDatabase::connect
     */
    public function testConstructUsingConstants()
    {
        $this->markTestSkipped('Database configuration using DatabaseConfiguration class will be deprecated.');
    }
    
    /**
     * @covers PewDatabase::instance
     * @covers PewDatabase::connect
     */
    public function testInstance()
    {
        $db1 = PewDatabase::instance();
        $db2 = PewDatabase::instance();
        
        $this->assertEquals($db1, $db2);
    }

    /**
     * @covers PewDatabase::from
     */
    public function testFrom()
    {
        $result1 = self::$pdb->from('test')->select(null, '*');
        $this->assertTrue(is_array($result1));
        
        $result2 = self::$pdb->select('test', '*');
        
        $result3 = null;
        
        try {
            $result3 = self::$pdb->select(null, '*');
        } catch (Exception $e) {
            $this->assertNull($result3);
        }
        
        $this->assertEquals($result1, $result2);
    }

    /**
     * @covers PewDatabase::into
     */
    public function testInto()
    {
        self::$pdb->into('users')->values(array('username' => 'test_subj_inserted'))->insert();
        
        $result = self::$pdb->where(array('username' => 'test_subj_inserted'))->from('users')->single(null, '*');
        
        $this->assertTrue(is_array($result));
        $this->assertEquals('test_subj_inserted', $result['username']);
    }

    /**
     * @covers PewDatabase::fields
     */
    public function testFields()
    {
        $result = self::$pdb->fields('username')->select('users');
        
        $this->assertFalse(isset($result[0]['email']));
        $this->assertTrue(isset($result[0]['username']));
    }

    /**
     *@covers PewDatabase::where
     */
    public function testWhere()
    {
        $result = self::$pdb->where(array('username' => 'test_subj'))->select('users');
        
        $this->assertTrue(count($result) > 0);
    }

    /**
     *@covers PewDatabase::group_by
     */
    public function testGroup_by()
    {
        $result = self::$pdb->group_by('username')->cell('users', 'count(*)');

        $this->assertTrue(count($result) > 0);
    }

    /**
     * @covers PewDatabase::having
     */
    public function testHaving()
    {
        $result = self::$pdb->group_by('username')->having(array('username' => 'test_subj'))->single('users', 'count(*) as cnt');

        $this->assertTrue(is_array($result));
        $this->assertTrue(is_numeric($result['cnt']));
    }

    /**
     * @covers PewDatabase::order_by
     */
    public function testOrder_by()
    {
        $result = self::$pdb->order_by('username')->select('users');

        $this->assertTrue(count($result) > 0);
    }

    /**
     * @covers PewDatabase::limit
     */
    public function testLimit()
    {
        $result = self::$pdb->order_by('username')->limit(1)->where(array('id>0'))->select('users');
        $this->assertEquals(1, count($result));

        $result = self::$pdb->order_by('username')->limit(1, 1)->select('users');
        $this->assertEquals(1, count($result));
    }

    /**
     * @covers PewDatabase::get_pk
     */
    public function testGet_pk() 
    {
        $users_pk = self::$pdb->get_pk('users');
        $this->assertEquals('id', $users_pk);
    }

    /**
     * @covers PewDatabase::table_exists
     */
    public function testTable_exists()
    {
        $this->assertTrue(self::$pdb->table_exists('users'));
        $this->assertFalse(self::$pdb->table_exists('non-existant-table'));
    }

    /**
     * @covers PewDatabase::cell
     * @covers PewDatabase::build_tags
     * @covers PewDatabase::get_query
     * @covers PewDatabase::run_query
     */
    public function testCell()
    {
        $result1 = self::$pdb->from('users')->cell(null, 'username');
        $this->assertTrue(is_string($result1));
        
        $result2 = self::$pdb->cell('users', 'username');
        $this->assertTrue(is_string($result2));
        
        $this->assertEquals($result1, $result2);
    }

    /**
     * @covers PewDatabase::cell
     * @covers PewDatabase::get_query
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage No table provided for method PewDatabase::cell()
     */
    public function testCellThrowsException()
    {
        self::$pdb->cell(null ,'*');
    }
    
    /**
     * @covers PewDatabase::single
     * @covers PewDatabase::build_tags
     * @covers PewDatabase::get_query
     * @covers PewDatabase::run_query
     */
    public function testSingle()
    {
        $result1 = self::$pdb->from('users')->single(null, '*');
        $this->assertTrue(is_array($result1));
        $this->assertArrayNotHasKey(0, $result1);
        $this->assertArrayHasKey('id', $result1);
        $this->assertArrayHasKey('username', $result1);
        $this->assertArrayHasKey('password', $result1);
        $this->assertArrayHasKey('email', $result1);
        
        $result2 = self::$pdb->single('users', '*');
        $this->assertArrayNotHasKey(0, $result2);
        $this->assertArrayHasKey('id', $result2);
        $this->assertArrayHasKey('username', $result2);
        $this->assertArrayHasKey('password', $result2);
        $this->assertArrayHasKey('email', $result2);
        
        $this->assertEquals($result1, $result2);
        
        $result_false = self::$pdb->where(array('id' => 0))->single('users', '*');
        $this->assertFalse($result_false);
    }

    /**
     * @covers PewDatabase::single
     * @covers PewDatabase::get_query
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage No table provided for method PewDatabase::single()
     */
    public function testSingleThrowsException()
    {
        self::$pdb->single(null ,'*');
    }

    /**
     * @covers PewDatabase::select
     * @covers PewDatabase::build_tags
     * @covers PewDatabase::get_query
     * @covers PewDatabase::run_query
     */
    public function testSelect() {
        $result1 = self::$pdb->from('users')->where(array('username' => array('IN', '"test_subject"')))->select(null, '*');
        $this->assertTrue(is_array($result1));
        
        $result2 = self::$pdb->where(array('username' => array('BETWEEN', 1, 2000)))->select('users');
        $this->assertTrue(is_array($result2));
    }

    /**
     * @covers PewDatabase::select
     * @covers PewDatabase::get_query
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage No table provided for method PewDatabase::select()
     */
    public function testSelectThrowsException()
    {
        self::$pdb->select(null, '*');
    }

    /**
     * @covers PewDatabase::insert
     * @covers PewDatabase::get_query
     * @covers PewDatabase::run_query
     */
    public function testInsert()
    {
        self::$pdb->values(array('username' => 'test_subj_test_insert'))->insert('users');
    }

    /**
     * @covers PewDatabase::insert
     * @covers PewDatabase::get_query
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage No table provided for method PewDatabase::insert()
     */
    public function testInsertThrowsException()
    {
        self::$pdb->insert();
    }

    /**
     * @covers PewDatabase::set
     * @covers PewDatabase::where
     * @covers PewDatabase::update
     * @covers PewDatabase::get_query
     * @covers PewDatabase::run_query
     */
    public function testUpdate()
    {
        self::$pdb->values(array('username' => 'test_subj_test_update'))->insert('users');
        self::$pdb->set(array('username' => 'test_subj_test_update_updated'))->where(array('username' => 'test_subj_test_update'))->update('users');
        $result = self::$pdb->where(array('username' => 'test_subj_test_update_updated'))->from('users')->fields('username')->cell();
    
        $this->assertEquals('test_subj_test_update_updated', $result);
    }

    /**
     * @covers PewDatabase::set
     * @covers PewDatabase::where
     * @covers PewDatabase::update
     * @covers PewDatabase::get_query
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage No table provided for method PewDatabase::update()
     */
    public function testUpdateThrowsException()
    {
        self::$pdb->update();
    }

    /**
     * @covers PewDatabase::delete
     * @covers PewDatabase::get_query
     * @covers PewDatabase::run_query
     */
    public function testDelete()
    {
        self::$pdb->values(array('username' => 'test_subj_delete_1'))->insert('users');
        $deleted_rows = self::$pdb->delete('users', array('username' => 'test_subj_delete_1'));
        
        $this->assertGreaterThan(1, $deleted_rows);
    }

    /**
     * @covers PewDatabase::delete
     * @covers PewDatabase::get_query
     * @expectedException InvalidArgumentException
     * @expectedMessage No table provided for method PewDatabase::delete()
     */
    public function testDeleteThrowsException()
    {
        self::$pdb->delete();
    }

    /**
     * 
     */
    public function testGet_query()
    {
        self::$pdb->reset();
        self::$pdb
                ->fields('id, username, password')
                ->from('users')
                ->where(array('username' => 'user1'))
                ->group_by('role')
                ->having(array('role_id' => 2))
                ->order_by('username')
                ->limit("2, 10");
        
        $this->assertEquals(
                'SELECT id, username, password FROM users WHERE username = :w_username_1 GROUP BY role HAVING role_id = :h_role_id_2 ORDER BY username LIMIT 2, 10', 
                self::$pdb->get_query('SELECT', 'users'));
        
        self::$pdb->reset();
        self::$pdb
                ->where(array('username' => 'user1'))
                ->set(array('username' => 'username2', 'email' => 'email3'));
        $this->assertEquals(
                'UPDATE users SET username = :s_username_2, email = :s_email_3 WHERE username = :w_username_1', 
                self::$pdb->get_query('UPDATE', 'users'));
        
        self::$pdb->reset();
        self::$pdb
                ->values(array('username' => 'username1', 'email' => 'email2'));
        $this->assertEquals(
                'INSERT INTO users (username, email) VALUES (:i_username_1, :i_email_2)', 
                self::$pdb->get_query('INSERT', 'users'));
        
        self::$pdb->reset();
        self::$pdb
                ->where(array('username' => 'user1'));
        $this->assertEquals(
                'DELETE FROM users WHERE username = :w_username_1', 
                self::$pdb->get_query('DELETE', 'users'));
        
    }

    /**
     * @covers PewDatabase::reset
     */
    public function testReset()
    {
        self::$pdb->reset();
        self::$pdb
                ->where(array('username' => 'fake'))
                ->limit("1, 3");

        $this->assertEquals(
                'SELECT * FROM users WHERE username = :w_username_1 LIMIT 1, 3', 
                self::$pdb->get_query('SELECT', 'users'));
        
        self::$pdb->reset();
        
        $this->assertEquals(
                'SELECT * FROM users', 
                self::$pdb->get_query('SELECT', 'users'));
    }
}
