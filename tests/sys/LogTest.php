<?php

require_once 'log.class.php';

/**
 * Test class for Log.
 * Generated by PHPUnit on 2012-01-11 at 12:16:44.
 */
class LogTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Log
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Log;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Log::in
     */
    public function test_in()
    {
        $before = microtime(true);
        $entry = $this->object->in('Logging test 1');
        $after = microtime(true);

        $this->assertArrayHasKey('time', $entry);
        $this->assertArrayHasKey('value', $entry);
        $this->assertEquals('Logging test 1', $entry['value']);
        $this->assertArrayHasKey('caller', $entry);
        $this->assertEquals('test_in', $entry['caller']['function']);
        $this->assertArrayHasKey('title', $entry);
        $this->assertNull($entry['title']);

        $this->assertGreaterThan($before, $entry['time']);
        $this->assertGreaterThan($entry['time'], $after);
        $this->assertEquals(1, $this->object->count());
        
        $entry2 = $this->object->in('Logging test 2', 'Title');
        $this->assertEquals(2, $this->object->count());
        $this->assertArrayHasKey('time', $entry2);
        $this->assertArrayHasKey('value', $entry2);
        $this->assertEquals('Logging test 2', $entry2['value']);
        $this->assertArrayHasKey('caller', $entry2);
        $this->assertEquals('test_in', $entry2['caller']['function']);
        $this->assertArrayHasKey('title', $entry2);
        $this->assertEquals('Title', $entry2['title']);

        $this->assertGreaterThan($entry['time'], $entry2['time']);
    }

    /**
     * @covers Log::out
     */
    public function test_out()
    {
        $this->assertFalse($this->object->out(false));

        $this->object->in('out test');
        ob_start();
        $output = $this->object->out();
        $result = ob_get_contents();
        ob_end_clean();
        
        $this->assertEquals($result, $output);
        $this->assertRegExp("/out test/", $result);
    }

    /**
     * @covers Log::to_file
     * @todo Implement test_to_file
     */
    public function test_to_file()
    {
        $filename = 'log_file_test.txt';
        $this->object->in('Some value', 'Some title');
        $this->object->to_file($filename, TESTS_PATH);

        $this->assertFileExists(TESTS_PATH . '/log_file_test.txt');
        unlink(TESTS_PATH . DIRECTORY_SEPARATOR . $filename);
    }

    /**
     * @covers Log::session
     */
    public function test_session()
    {
        defined('USESESSION') or define('USESESSION', true);
        $_SESSION['test1'] = 'test_1_value';
        ob_start();
        $output = $this->object->session();
        $result = ob_get_contents();
        ob_end_clean();
        
        $this->assertRegExp("/Logged/", $result);
        $this->assertRegExp("/test_1_value/", $result);
    }
}
