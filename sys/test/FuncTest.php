<?php
require_once dirname(__FILE__) . '/../../config.php';
require_once dirname(__FILE__) . '/../../func.class.php';

/**
 * Test class for Func.
 * Generated by PHPUnit on 2012-02-20 at 12:28:06.
 */
class FuncTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Func
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Func;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testCfg()
    {
        $this->assertEquals('config is set!', Func::cfg('is_config_set?', 'config is set!'));
        $this->assertEquals('config is set!', Func::cfg('is_config_set?'));
        $this->assertEquals(array('is_config_set?' => 'config is set!'), Func::cfg(true));
        $this->assertNull(Func::cfg('this does not exist'));
        $this->assertNull(Func::cfg(false));
        $this->assertNull(Func::cfg(12.0));
    }

    public function testPr()
    {
        $array = array(1, 2, 3);
        $integer = '1234';
        $string = 'output string';
        
        ob_start();
        Func::pr($array, $title = null);
        $result = ob_get_contents();
        ob_end_clean();
        
        $this->assertEquals("Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n", $result);
        
        ob_start();
        Func::pr(12, $title = 'Twelve');
        $result = ob_get_contents();
        ob_end_clean();
        
        $this->assertEquals("Twelve: 12", $result);
    }

    public function testPew_exit()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testGet_execution_time()
    {
        $this->assertEquals(0, Func::get_execution_time());
        $this->assertNotEquals(0, Func::get_execution_time());
        $this->assertNotEquals(0, Func::get_execution_time(true));
    }

    public function testSanitize()
    {
        $str = '; DELETE FROM \"users\"';
        $this->assertEquals('; DELETE FROM \\\\\"users\\\\\\"', Func::sanitize($str));
        
        $str = '12';
        $this->assertEquals('12', Func::sanitize($str));
        
        $str = 12;
        $this->assertEquals(12, Func::sanitize($str));
    }

    public function testClean_array_data()
    {
        $array_data = array('', array('\\"; DELETE * from users'), '000234');
        $result = array('', array('"; DELETE * from users'), '000234');
        
        $this->assertEquals($result, Func::clean_array_data($array_data));
    }

    public function testPew_clean_string()
    {
        $str = "\"; DELETE * FROM 'users'";
        
        $this->assertEquals('\&quot;; DELETE * FROM \&#039;users\&#039;', Func::pew_clean_string($str));
    }

    public function testDeref()
    {
        function returns_array()
        {
            return array(1, 2, 3, 4, 5, 6);
        }
        
        $this->assertEquals(3, Func::deref(returns_array(), 2));
        $this->assertNull(Func::deref(returns_array(), 10));
        
        // The following test case must throw a E_USER_WARNING error
        ////////////////////////////////////////////////////////////
        ob_start();
        $return = Func::deref(returns_array(), 'as', true);
        $result = ob_get_contents();
        ob_end_clean();
        
        $this->assertNull($return);
        $this->assertEquals("", $result);
    }

    public function testArray_reap()
    {
        $array = array(
            array(1, 2, 3, 4, 5),
            array('string1', 'string2', 'string3', 'str4' => 'string4'),
            array('uno' => 'one', 'dos' => 'two', 'tres' => 'three'),
            'PEW' => true
        );
        
        $result1 = array(1 => array('str4' => 'string4'), 2 => array('uno' => 'one', 'dos' => 'two', 'tres' => 'three'));
        $result2 = array(2 => array('uno' => 'one'));
        $result3 = array(array(1, 2, 3, 4, 5), array('string1', 'string2', 'string3'));
        $result4 = array('PEW' => true);
        $result5 = array(1 => array(2 => 'string3'));
        $this->assertEquals($result1, Func::array_reap($array, '#:$'));
        $this->assertEquals($result2, Func::array_reap($array, '#:uno'));
        $this->assertEquals($result3, Func::array_reap($array, '#:#'));
        $this->assertEquals($result4, Func::array_reap($array, '$'));
        $this->assertEquals($result5, Func::array_reap($array, '1:2'));
        
        $obj = new stdClass();
        $obj->prop = 1;
        
        $array2 = array(
            'obj' => $obj
        );
        
        $result6 = array('obj' => $obj);
        $this->assertEquals($result6, Func::array_reap($array2, '$'), "Objects as array values are not converted");
    }

    public function testArray_flatten()
    {
        $array = array(array(1, 2, 3), 4, array ('five' => 5, 'six' => 6));
        $this->assertEquals(array(1, 2, 3, 4, 5, 6), Func::array_flatten($array));
    }

    public function testArray_to_xml()
    {
        $array = array(
            'one' => array('test'),
            1 => array(1, 2, 3)
        );
        $xml = 'root';
        
        $this->assertEquals('', Func::array_to_xml($array, $xml));
    }

    public function testFile_name_to_class_name()
    {
        $this->assertEquals('PewClassName', Func::file_name_to_class_name('pew_class_name'));
        $this->assertEquals('PewclassName', Func::file_name_to_class_name('pewclass_name'));
        $this->assertEquals('PEWClassName', Func::file_name_to_class_name('p_e_w_class_name'));
        $this->assertEquals('Pewclassname', Func::file_name_to_class_name('pewclassname'));
        $this->assertEquals('PewClassName', Func::file_name_to_class_name('pew_class_name'));
        $this->assertEquals('Pewclassname', Func::file_name_to_class_name('pewclassname'));
    }

    public function testClass_name_to_file_name()
    {
        $this->assertEquals('pew_class_name', Func::class_name_to_file_name('PewClassName'));
        $this->assertEquals('pewclass_name', Func::class_name_to_file_name('PewclassName'));
        $this->assertEquals('p_e_w_class_name', Func::class_name_to_file_name('PEWClassName'));
        $this->assertEquals('pewclassname', Func::class_name_to_file_name('Pewclassname'));
        $this->assertEquals('pew_class_name', Func::class_name_to_file_name('pewClassName'));
        $this->assertEquals('pewclassname', Func::class_name_to_file_name('pewclassname'));
    }

    public function testRedirect()
    {
        $this->markTestSkipped('The http redirecion is tested at functional stage.');
    }

    public function testCheck_dirs()
    {
        if (is_dir('testFunc_check_dir')) {
            rmdir('testFunc_check_dir');
        }
        $this->assertFalse(is_dir('testFunc_check_dir'));
        $this->assertTrue(Func::check_dirs('testFunc_check_dir'));
        $this->assertTrue(is_dir('testFunc_check_dir'));
        
        $this->assertFalse(Func::check_dirs(''));
    }

    public function testSlugify()
    {
        $str = 'This is a slug';
        $this->assertEquals('this-is-a-slug', Func::slugify($str));
        
        $str = 'This has strange characters: áprÑi\n.´t-çth$i#s';
        $this->assertEquals('this-has-strange-characters-print-this', Func::slugify($str));
        
        $str = 'This is a slug';
        $this->assertEquals('this-is-a-slug', Func::slugify($str));
        
        $str = 'This is a slug';
        $this->assertEquals('this-is-a-slug', Func::slugify($str));
    }

    public function testTo_underscores()
    {
        $this->assertEquals('______', Func::to_underscores('- _-- '));
        $this->assertEquals('My_Class_Name', Func::to_underscores('My Class Name'));
        $this->assertEquals('my_class_name', Func::to_underscores('my class name'));
        $this->assertEquals('My_Class\Name', Func::to_underscores('My-Class\\Name'));
    }

    public function testRoot()
    {
        if (defined('STDIN')) {
            $this->markTestSkipped();
        } else {
            $this->assertEquals(__DIR__ . DIRECTORY_SEPARATOR, Func::root('', false));
            $this->assertEquals(__DIR__ . DIRECTORY_SEPARATOR . 'subdir', Func::root('subdir', false));
        }
    }

    public function testUrl()
    {
        if (defined('STDIN')) {
            $this->markTestSkipped();
        } else {
            $this->assertEquals(basename(__DIR__), Func::url('', false));
            $this->assertEquals(basename(__DIR__) . '/example2', Func::url('example2', false));
        }
    }

    public function testWww()
    {
        $this->markTestincomplete();
    }

    public function testPrint_config()
    {
        ob_start();
        print_config();
        $result = ob_get_contents();
        ob_end_clean();
        
        $this->assertTrue(is_string($result));
        
        $lines = explode(PHP_EOL, trim($result));
        $this->assertEquals(4, count($lines));
    }
    
    public function testUser()
    {
        if (!USESESSION || !USEAUTH or defined(STDIN)) {
            $this->markTestIncomplete();
        } else {
            $user = user();
            $this->assertFalse($user);
        }
    }
}

?>
