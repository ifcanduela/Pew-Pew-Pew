<?php

require_once dirname(__FILE__) . '/../../pew_stack.class.php';

/**
 * Test class for PewStack.
 * Generated by PHPUnit on 2012-01-11 at 12:35:36.
 */
class PewStackTest extends PHPUnit_Framework_TestCase {

    /**
     * @var PewStack
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new PewStack;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    public function testCreate()
    {
        $stack = new PewStack(1, 2, 3, 4, 5);
        $this->assertNotNull($stack);
        
        $stack = new PewStack();
        $this->assertNotNull($stack);
    }
    
    public function testPut()
    {
        $this->assertNull($this->object->put('first_item'));
    }

    public function testCurrent() {
        $this->assertNull($this->object->current());
        
        $this->object->put(1);
        $this->assertEquals(1, $this->object->current());
        
        $this->object->put(2);
        $this->assertEquals(2, $this->object->current());
        
        $this->object->put('string value');
        $this->assertEquals('string value', $this->object->current());
        
        $this->object->pop();
        $this->assertEquals(2, $this->object->current());
    }

    public function testPop()
    {
        $this->object->put(1);
        $this->object->put(2);
        $this->object->put(3);
        $this->object->put(4);
        
        $this->assertEquals(4, $this->object->pop());
        $this->assertEquals(3, $this->object->pop());
        
        $this->object->put(5);
        
        $this->assertEquals(5, $this->object->pop());
        $this->assertEquals(2, $this->object->pop());
        $this->assertEquals(1, $this->object->pop());
    }

    /**
     * @todo Implement testSkip().
     */
    public function testSkip()
    {
        $this->object->put(1);
        $this->object->put(2);
        $this->object->put(3);
        $this->object->put(4);
        
        $result = $this->object->skip(2);
        $this->assertEquals(2, $result);
        $this->assertEquals(1, $this->object->pop());
        
        $this->assertNull($this->object->pop());
    }

    /**
     * @todo Implement testSize().
     */
    public function testSize()
    {
        $this->object->put(1);
        $this->object->put(2);
        $this->object->put(3);
        $this->object->put(4);
        
        $this->assertEquals(4, $this->object->size());
        
        $this->object->pop();
        
        $this->assertEquals(3, $this->object->size());
        $this->object->pop();
        $this->assertEquals(2, $this->object->size());
        $this->object->pop();
        $this->assertEquals(1, $this->object->size());
        $this->object->pop();
        $this->assertEquals(0, $this->object->size());
        $this->object->pop();
        $this->assertEquals(0, $this->object->size());
    }

    /**
     * @todo Implement testVoid().
     */
    public function testVoid() {
        $this->assertTrue($this->object->void());
        $this->object->put(1);
        $this->assertFalse($this->object->void());
        $this->object->skip(1);
        $this->assertTrue($this->object->void());
    }

    /**
     * @todo Implement testIs_current().
     */
    public function testIs_current() {
        $this->object->put(1);
        $this->object->put(2);
        $this->object->put(3);
        $this->object->put(4);
        
        $this->assertTrue($this->object->is_current(4));
        $this->object->pop();
        $this->assertTrue($this->object->is_current(3));
        $this->assertFalse($this->object->is_current(123));
    }
}

?>
